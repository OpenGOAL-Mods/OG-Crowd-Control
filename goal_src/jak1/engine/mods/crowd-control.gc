    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: crowd-control.gc
    ;; name in dgo: crowd-control.gc
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Types.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #|
        Each command has a on function and a off function and a index and a cooldown and a enabled/disabled and a active/inactive.
    |#

(defconstant NUM_COMMANDS 12)

;; Store the last twitch message in a string??
(define *last-twitch-message* string)

;;Activate effects randomly to test them before twitch chat integration is done.
(define *use-effect-timer* #f)

(deftype command (structure)
((name string)
 (on-func (function none))
 (off-func (function none))
 (index int)
 (cooldown int)
 (duration int)
 (enabled? symbol)
 (active? symbol)
 (enabled-time int)
)
)

 (deftype command-info (structure)
  ((commands command NUM_COMMANDS :inline :offset-assert 0)
   )
  ) 

(define *command-info* (new 'static 'command-info))

(defun set-command-param ((self command) (name string) (on-func (function none)) (off-func (function none)) (index int) (cooldown int) (duration int)(enabled? symbol))
(set! (-> self name) (new 'global 'string 15 (the-as string #f)) );; now you can have at most 128 characters of a string, but you are eating away at global memory
(copy-string<-string (-> self name) name)
(set! (-> self on-func) on-func)
(set! (-> self off-func) off-func)
(set! (-> self index) index)
(set! (-> self cooldown) cooldown)
(set! (-> self duration) duration)
(set! (-> self enabled?) enabled?)
(set! (-> self active?) #f)
;;set active to false as everything will be false on boot
(none)
)

;;(lambda () (send-event *target* 'loading) (none))

(defun set-up-command-info ()
"This function runs on startup, and it checks if command-info has been setup. If command-info is not set up then it sets it up"
(if (= (-> *command-info* commands 1 name) 0)
(begin
;; Command info has not been setup so lets set it up
;;setup functions with set-command-param command name on-func off-func index cooldown duration enabled?
(set-command-param (-> *command-info* commands 1) 
    "superjump" 
    (lambda () (set! (-> *TARGET-bank* jump-height-max)(meters 15.0))(set! (-> *TARGET-bank* jump-height-min)(meters 5.0))(set! (-> *TARGET-bank* double-jump-height-max)(meters 15.0))(set! (-> *TARGET-bank* double-jump-height-min)(meters 5.0)) (none))
    (lambda () (set! (-> *TARGET-bank* jump-height-max)(meters 3.5))(set! (-> *TARGET-bank* jump-height-min)(meters 1.01))(set! (-> *TARGET-bank* double-jump-height-max)(meters 2.5))(set! (-> *TARGET-bank* double-jump-height-min)(meters 1)) (none))
    1
    30 ;;30
    20 ;;20
    #t
    )
(set-command-param (-> *command-info* commands 2) 
    "fastjak" 
    (lambda () (set! (-> *walk-mods* target-speed) 77777.0)(set! (-> *double-jump-mods* target-speed) 77777.0)(set! (-> *jump-mods* target-speed) 77777.0)(set! (-> *jump-attack-mods* target-speed) 77777.0)(set! (-> *attack-mods* target-speed) 77777.0)(set! (-> *forward-high-jump-mods* target-speed) 77777.0)(set! (-> *jump-attack-mods* target-speed) 77777.0)(set! (-> *stone-surface* target-speed) 1.25) (none))
    (lambda () (set! (-> *walk-mods* target-speed) 40960.0)(set! (-> *double-jump-mods* target-speed) 32768.0)(set! (-> *jump-mods* target-speed) 40960.0)(set! (-> *jump-attack-mods* target-speed) 24576.0)(set! (-> *attack-mods* target-speed) 40960.0)(set! (-> *forward-high-jump-mods* target-speed) 45056.0)(set! (-> *jump-attack-mods* target-speed) 24576.0)(set! (-> *stone-surface* target-speed) 1.0) (none))
    2
    120 ;;120
    20 ;;20
    #t
    )
(set-command-param (-> *command-info* commands 3) 
    "slowjak" 
    (lambda () (send-event *target* 'reset-pickup 'eco)(set! (-> *walk-mods* target-speed) 20000.0)(set! (-> *double-jump-mods* target-speed) 20000.0)(set! (-> *jump-mods* target-speed) 20000.0)(set! (-> *jump-attack-mods* target-speed) 20000.0)(set! (-> *attack-mods* target-speed) 20000.0)(set! (-> *stone-surface* target-speed) 1.0)(set! (-> *TARGET-bank* wheel-flip-dist) (meters 0)) (none))
    (lambda () (set! (-> *walk-mods* target-speed) 40960.0)(set! (-> *double-jump-mods* target-speed) 32768.0)(set! (-> *jump-mods* target-speed) 40960.0)(set! (-> *jump-attack-mods* target-speed) 24576.0)(set! (-> *attack-mods* target-speed) 40960.0)(set! (-> *forward-high-jump-mods* target-speed) 45056.0)(set! (-> *jump-attack-mods* target-speed) 24576.0)(set! (-> *TARGET-bank* wheel-flip-dist) (meters 17.3))(send-event *target* 'get-pickup (pickup-type eco-blue) 0.1) (none))
    3
    240 ;;240
    20 ;;20
    #t
    )
(set-command-param (-> *command-info* commands 4) 
    "superboosted" 
    (lambda () (set! (-> *edge-surface* fric) 1.0) (none))
    (lambda () (set! (-> *edge-surface* fric) 30720.0) (none))
    4
    30 ;;30
    120 ;;120
    #t
    )
(set-command-param (-> *command-info* commands 5) 
    "noboosteds" 
    (lambda () (set! (-> *edge-surface* fric) 1530000.0) (none))
    (lambda () (set! (-> *edge-surface* fric) 30720.0) (none))
    5
    180 ;;180
    120 ;;120
    #t
    )
(set-command-param (-> *command-info* commands 6) 
    "nojumps" 
    (lambda () (logior! (-> *target* state-flags) (state-flags prevent-jump)) (none))
    (lambda () (logclear! (-> *target* state-flags) (state-flags prevent-jump)) (none))
    6
    420 ;;420
    60 ;;60
    #t
    )
(set-command-param (-> *command-info* commands 7) 
    "pacifist" 
    (lambda () (set! (-> *TARGET-bank* punch-radius) (meters -1.0))(set! (-> *TARGET-bank* spin-radius) (meters -1.0))(set! (-> *TARGET-bank* flop-radius) (meters -1.0))(set! (-> *TARGET-bank* uppercut-radius) (meters -1.0)) (none))
    (lambda () (set! (-> *TARGET-bank* punch-radius) (meters 1.3))(set! (-> *TARGET-bank* spin-radius) (meters 2.2))(set! (-> *TARGET-bank* flop-radius) (meters 1.4))(set! (-> *TARGET-bank* uppercut-radius) (meters 1)) (none))
    7
    240 ;;240
    60 ;;60
    #t
    )
(set-command-param (-> *command-info* commands 8) 
    "shortfall" 
    (lambda () (set! (-> *TARGET-bank* fall-far) (meters 2.5))(set! (-> *TARGET-bank* fall-far-inc) (meters 3.5)) (none))
    (lambda () (set! (-> *TARGET-bank* fall-far) (meters 30))(set! (-> *TARGET-bank* fall-far-inc) (meters 20)) (none))
    8
    300 ;;30
    60 ;;60
    #t
    )
(set-command-param (-> *command-info* commands 9) 
    "ghostjak" 
    (lambda () (set! (-> *TARGET-bank* body-radius) (meters -1.0)) (none))
    (lambda () (set! (-> *TARGET-bank* body-radius) (meters 0.7)) (none))
    9
    360 ;;360
    3 ;;3
    #t
    )
(set-command-param (-> *command-info* commands 10) 
    "rocketman" 
    (lambda () (stop 'debug)(set! (-> *standard-dynamics* gravity-length) (meters -60.0))(start 'play (get-or-create-continue! *game-info*)) (none))
    (lambda () (stop 'debug)(set! (-> *standard-dynamics* gravity-length) (meters 60.0))(start 'play (get-or-create-continue! *game-info*)) (none))
    10
    360 ;;360
    5 ;;5
    #t
    )
(set-command-param (-> *command-info* commands 11) 
    "noeco" 
    (lambda () (send-event *target* 'reset-pickup 'eco)(set! (-> *FACT-bank* eco-full-timeout) (seconds 0.0)) (none))
    (lambda () (set! (-> *FACT-bank* eco-full-timeout) (seconds 20.0)) (none))
    11
    160 ;;160
    10 ;;10
    #t
    )
(set-command-param (-> *command-info* commands 12) 
    "freecam" 
    (lambda () (stop 'debug) (none))
    (lambda () (start 'play (get-or-create-continue! *game-info*)) (none))
    12
    300 ;;30
    6 ;;6
    #t
    )
(set-command-param (-> *command-info* commands 13) 
    "dark" 
    (lambda () (set! (-> (level-get-target-inside *level*) mood-func)update-mood-finalboss) (none))
    (lambda () (set! (-> (level-get-target-inside *level*) mood-func)update-mood-darkcave) (none))
    13
    240 ;;240
    30 ;;30
    #t
    )
(set-command-param (-> *command-info* commands 14) 
    "nodax" 
    (lambda () (send-event *target* 'sidekick #f) (none))
    (lambda () (send-event *target* 'sidekick #t) (none))
    14
    20 ;;20
    45 ;;45
    #t
    )
(set-command-param (-> *command-info* commands 15) 
    "smallnet" 
    (lambda () (when (process-by-ename "fisher-1")(set!(-> *FISHER-bank* net-radius)(meters 0.0))) (none))
    (lambda () (when (process-by-ename "fisher-1")(set! (-> *FISHER-bank* net-radius)(meters 0.7))) (none))
    15
    45 ;;45
    10 ;;10
    #t
    )
(set-command-param (-> *command-info* commands 16) 
    "widefish" 
    (lambda () (when (process-by-ename "fisher-1")(set! (-> *FISHER-bank* width)(meters 10.0))) (none))
    (lambda () (when (process-by-ename "fisher-1")(set! (-> *FISHER-bank* width)(meters 3.3))) (none))
    16
    45 ;;45
    4 ;;4
    #t
    )
(set-command-param (-> *command-info* commands 17) 
    "lowpoly" 
    (lambda () (set! (-> *pc-settings* lod-force-tfrag) 2)(set! (-> *pc-settings* lod-force-tie) 3)(set! (-> *pc-settings* lod-force-ocean) 2)(set! (-> *pc-settings* lod-force-actor) 3) (none))
    (lambda () (set! (-> *pc-settings* lod-force-tfrag) 0)(set! (-> *pc-settings* lod-force-tie) 0)(set! (-> *pc-settings* lod-force-ocean) 0)(set! (-> *pc-settings* lod-force-actor) 0) (none))
    17
    30 ;;30
    60 ;;60
    #t
    )
(set-command-param (-> *command-info* commands 18) 
    "nodax" 
    (lambda () (send-event *target* 'sidekick #f) (none))
    (lambda () (send-event *target* 'sidekick #t) (none))
    18
    20 ;;20
    45 ;;45
    #t
    )
)

    ;; Command info has been setup lets just return
        (return #f)
       )
(none)
)

(defun valid-command? ((i int))
"takes in a int and returns a boolean if the command can be activated"
;; Do a sanity check on user inputted values at some point lol
(let ((on-cooldown?  (!= (-> *command-info* commands i enabled-time) 0))
      (already-active? (-> *command-info* commands i active?))
    )
    ;;(format #t "Command valid???: ~A ~%"(not (and on-cooldown? already-active?)))
    (return (not (and on-cooldown? already-active?)))
)
#f
)

(defbehavior cooldown-timer process ((i int))
"Keep track of how long ago the command was activated to check if it can be activated again, via cooldown"
(set! (-> *command-info* commands i enabled-time) 0)
(while (<= (-> *command-info* commands i enabled-time) (-> *command-info* commands i cooldown))
(let ((current-timea (current-time)))
        (until (time-elapsed? current-timea (seconds 1))
            (suspend)
        )
    (set! (-> *command-info* commands i enabled-time) (+ 1 (-> *command-info* commands i enabled-time)))
    )
)
(set! (-> *command-info* commands i enabled-time) 0)
  (none)
)

      
;;(process-spawn-function process effect-proc index)
(defbehavior effect-proc process ((i int))
    "Activate given effect in command-info by index."
    (when (valid-command? i)
    ;; Set effect active to #t
    (set! (-> *command-info* commands i active?) #t)
    ;; Run command that turns on effect
    ((-> *command-info* commands i on-func))
    ;; Spawn the process that keeps track of enabled time
    (process-spawn-function process cooldown-timer i)
    ;;Sleep this process for the duration amount time
    (let ((current-timea (current-time)))
        (until (time-elapsed? current-timea (seconds (-> *command-info* commands i duration)))
            (suspend)
        )
    )
    ;; Run command that restores default value if it is not set to #f
    (if (-> *command-info* commands i off-func)
        ((-> *command-info* commands i off-func))
    )
    ;; Set effect active to #f
    (set! (-> *command-info* commands i active?) #f)
    ;; kill process
    )
    (none)
)

(defbehavior print-active-effects process ()
    "This process finds active effects, and prints them to the screen"
   
    
    (let ((y-pos 50))
  
        (dotimes (i NUM_COMMANDS)
    (if (and (-> *command-info* commands i active?) (!= i 0))
    (begin 
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Command name: ~S ~%Remaing time: ~D ~%"
                                     (-> *command-info* commands i name)
                                     (- (-> *command-info* commands i duration) (-> *command-info* commands i enabled-time))
      )
                      buf 0 y-pos (font-color green) (font-flags shadow kerning)))
    
    ;;Then remove some y value so we arent on top of each other
    (set! y-pos (+ y-pos 30))
    )
    ;;print to screen at location x
    )
    )
    
    

    
    )

    
    

    
(none)
)

(defbehavior update-last-message process ()
    "this process somehow monitors a given chat, then returns the last message and updates it in a global"
    (while #t
    
    
    )
    (none)
)

(defbehavior activate-effects-timed process ()
    "This process activates a random effect every x amount of time"

    (while #t
    ;;Sleep this process for the effect activation time 
    (let ((current-timea (current-time)))
        (until (time-elapsed? current-timea (seconds 20))



        (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                      (bucket-id subtitle))
      (draw-string-xy (string-format "Rolling in: ~D ~%"
                                     (- (- (current-time) current-timea) (seconds 20)))
      
                      buf 0 188 (font-color red) (font-flags shadow kerning)))

            (suspend)
        )
    )
    
    
    ;;activate 3 random effects
    (dotimes (i 3)
    ;;Get a random index
    (let ((rand-val (knuth-rand-int-range 1 NUM_COMMANDS)))
    ;;TODO check if its already active if so roll again
    (while (not( valid-command? rand-val))
    (format #t "command is not valid rolling a new one")
    (set! rand-val (knuth-rand-int-range 1 NUM_COMMANDS))
    )
    (format #t "spawning process cooldown timer")
    (process-spawn-function process effect-proc rand-val)
    (format #t "Turning on process: ~S~%" (-> *command-info* commands rand-val name))
    (format #t "Duration for process: ~S is ~D ~%" (-> *command-info* commands rand-val name) (-> *command-info* commands rand-val duration))
    (suspend)
    )
    )
    )
    (none)
)






;;usefull stuff
;;    (format #t " Enabled time is ~D ~%"(-> *command-info* commands i enabled-time) )
;;    (format #t " Cooldown time is ~D ~%" (-> *command-info* commands i cooldown))
;;    (format #t " Are we currently on cooldown? ~A ~%" (< (-> *command-info* commands i enabled-time) (-> *command-info* commands i cooldown)))